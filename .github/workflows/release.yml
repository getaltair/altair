name: Release Installers

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.1.0)'
        required: true
        default: '0.1.0'

jobs:
  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libstdc++-12-dev \
            desktop-file-utils libgdk-pixbuf2.0-dev \
            fakeroot patchelf wget imagemagick \
            libsecret-1-dev libfuse2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Install dependencies
        run: |
          cd apps/altair_guidance
          flutter pub get

      - name: Build AppImage
        run: |
          cd apps/altair_guidance
          VERSION=${{ env.VERSION }} bash packaging/linux/build-appimage.sh

      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: altair-guidance-linux-appimage
          path: apps/altair_guidance/build/linux/x64/release/AltairGuidance-*.AppImage

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'

      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop

      - name: Install dependencies
        run: |
          cd apps/altair_guidance
          flutter pub get

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Build DMG
        run: |
          cd apps/altair_guidance
          VERSION=${{ env.VERSION }} bash packaging/macos/build-dmg.sh

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: altair-guidance-macos-dmg
          path: apps/altair_guidance/build/macos/Build/Products/Release/AltairGuidance-*.dmg

  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set version
        id: version
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: |
          cd apps/altair_guidance
          flutter pub get

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Build Windows Installer
        shell: pwsh
        run: |
          cd apps/altair_guidance
          $env:VERSION = "${{ env.VERSION }}"
          powershell.exe -ExecutionPolicy Bypass -File packaging/windows/build-installer.ps1 -Version $env:VERSION

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: altair-guidance-windows-installer
          path: apps/altair_guidance/build/windows/installer/AltairGuidance-*-Setup.exe

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: |
            altair-guidance-linux-appimage/AltairGuidance-*.AppImage
            altair-guidance-macos-dmg/AltairGuidance-*.dmg
            altair-guidance-windows-installer/AltairGuidance-*-Setup.exe
          body: |
            ## Altair Guidance v${{ env.VERSION }}

            ### Downloads

            - **Linux**: `AltairGuidance-${{ env.VERSION }}-x86_64.AppImage`
            - **macOS**: `AltairGuidance-${{ env.VERSION }}.dmg`
            - **Windows**: `AltairGuidance-${{ env.VERSION }}-Setup.exe`

            ### Installation

            #### Linux (AppImage)
            ```bash
            chmod +x AltairGuidance-*.AppImage
            ./AltairGuidance-*.AppImage
            ```

            #### macOS (DMG)
            1. Download the DMG file
            2. Open the DMG
            3. Drag Altair Guidance to Applications
            4. Eject the DMG

            #### Windows (Installer)
            1. Download the installer
            2. Run the installer
            3. Follow the installation wizard

            ### Features

            **Core Task Management:**
            - ✅ Quick capture (< 3 seconds thought-to-save)
            - ✅ Task CRUD operations with status tracking
            - ✅ Project organization
            - ✅ Tag-based filtering and search
            - ✅ Keyboard shortcuts and focus mode
            - ✅ Drag & drop task reordering
            - ✅ Offline-first architecture
            - ✅ Neo-brutalist UI for visual clarity

            **Coming Soon:**
            - ⏳ AI-powered task breakdown (waiting for settings UI)
            - ⏳ Visual time tracking
            - ⏳ Multi-device sync

            ### What's New

            See the full changelog below for details on this release.

            ---

            **Note**: This is a draft release. Please test thoroughly before publishing.
