name: Mobile CI/CD

on:
  push:
    branches: [main, develop, feat/mobile-*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  # Android build and test
  android:
    name: Android Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        working-directory: apps/altair_guidance
        run: flutter pub get

      - name: Run Flutter analyze
        working-directory: apps/altair_guidance
        run: flutter analyze

      - name: Run unit tests
        working-directory: apps/altair_guidance
        run: flutter test --coverage

      - name: Build Android APK (Debug)
        working-directory: apps/altair_guidance
        run: flutter build apk --debug

      - name: Build Android APK (Release)
        working-directory: apps/altair_guidance
        run: flutter build apk --release

      - name: Build Android App Bundle
        working-directory: apps/altair_guidance
        run: flutter build appbundle --release

      - name: Upload Debug APK
        uses: actions/upload-artifact@v5
        with:
          name: altair-guidance-android-debug
          path: apps/altair_guidance/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v5
        with:
          name: altair-guidance-android-release
          path: apps/altair_guidance/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

      - name: Upload App Bundle
        uses: actions/upload-artifact@v5
        with:
          name: altair-guidance-android-bundle
          path: apps/altair_guidance/build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

      - name: Generate build info
        run: |
          echo "Build Date: $(date)" > build-info.txt
          echo "Commit: ${{ github.sha }}" >> build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> build-info.txt
          echo "Flutter Version: 3.35.6" >> build-info.txt
          cat build-info.txt

      - name: Upload build info
        uses: actions/upload-artifact@v5
        with:
          name: android-build-info
          path: build-info.txt
          retention-days: 30

  # Mobile integration tests (Android)
  android-integration-test:
    name: Android Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: android

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Enable KVM (for Android emulator)
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        working-directory: apps/altair_guidance
        run: flutter pub get

      - name: Run integration tests (Linux for now)
        working-directory: apps/altair_guidance
        run: |
          # Install Linux dependencies for testing
          sudo apt-get update -y
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            liblzma-dev libstdc++-12-dev xvfb libglu1-mesa

          # Run integration tests with virtual display
          xvfb-run -a flutter test integration_test/ --reporter expanded
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: android-integration-test-results
          path: apps/altair_guidance/TEST_RESULTS.json
          retention-days: 7

  # iOS build (requires macOS runner - currently disabled to save costs)
  # Uncomment when ready to build for iOS
  # ios:
  #   name: iOS Build
  #   runs-on: macos-latest
  #   timeout-minutes: 60
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.35.6'
  #         channel: 'stable'
  #         cache: true
  #
  #     - name: Install dependencies
  #       working-directory: apps/altair_guidance
  #       run: flutter pub get
  #
  #     - name: Install CocoaPods
  #       run: |
  #         cd apps/altair_guidance/ios
  #         pod install
  #
  #     - name: Run Flutter analyze
  #       working-directory: apps/altair_guidance
  #       run: flutter analyze
  #
  #     - name: Run unit tests
  #       working-directory: apps/altair_guidance
  #       run: flutter test
  #
  #     - name: Build iOS app (simulator)
  #       working-directory: apps/altair_guidance
  #       run: |
  #         flutter build ios --simulator --debug
  #
  #     - name: Upload iOS build
  #       uses: actions/upload-artifact@v5
  #       with:
  #         name: altair-guidance-ios-debug
  #         path: apps/altair_guidance/build/ios/iphonesimulator/
  #         retention-days: 7

  # Summary job
  mobile-ci-summary:
    name: Mobile CI Summary
    runs-on: ubuntu-latest
    needs: [android, android-integration-test]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "=== Mobile CI/CD Summary ==="
          echo "Android Build: ${{ needs.android.result }}"
          echo "Android Integration Tests: ${{ needs.android-integration-test.result }}"
          echo ""
          if [ "${{ needs.android.result }}" == "success" ]; then
            echo "✅ Android build completed successfully"
          else
            echo "❌ Android build failed"
          fi

          if [ "${{ needs.android-integration-test.result }}" == "success" ]; then
            echo "✅ Integration tests passed"
          else
            echo "⚠️  Integration tests failed or were skipped"
          fi

      - name: Fail if Android build failed
        if: needs.android.result != 'success'
        run: exit 1
