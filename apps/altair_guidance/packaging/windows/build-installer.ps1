# PowerShell script to build Windows installer for Altair Guidance
# Requires: Inno Setup (https://jrsoftware.org/isinfo.php)

param(
    [string]$Version = "0.1.0"
)

$ErrorActionPreference = "Stop"

# Configuration
$AppName = "Altair Guidance"
$AppId = "com.getaltair.altair_guidance"
$Publisher = "Altair"

# Directories
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$AppDir = (Get-Item "$ScriptDir\..\..").FullName
$BuildDir = "$AppDir\build\windows\x64\runner\Release"
$PackagingDir = $ScriptDir

Write-Host "======================================" -ForegroundColor Cyan
Write-Host "Building Windows Installer for $AppName" -ForegroundColor Cyan
Write-Host "Version: $Version" -ForegroundColor Cyan
Write-Host "======================================" -ForegroundColor Cyan

# Step 1: Build the Flutter app in release mode
Write-Host ""
Write-Host "[1/3] Building Flutter app in release mode..." -ForegroundColor Yellow
Set-Location $AppDir
flutter build windows --release

# Verify the executable was created
if (-not (Test-Path "$BuildDir\altair_guidance.exe")) {
    Write-Error "Error: Executable not found at $BuildDir\altair_guidance.exe"
    exit 1
}

# Step 2: Generate Inno Setup script
Write-Host ""
Write-Host "[2/3] Generating Inno Setup script..." -ForegroundColor Yellow

$InnoScript = @"
; Inno Setup Script for Altair Guidance
; Generated by build-installer.ps1

#define MyAppName "$AppName"
#define MyAppVersion "$Version"
#define MyAppPublisher "$Publisher"
#define MyAppURL "https://getaltair.com"
#define MyAppExeName "altair_guidance.exe"
#define MyAppId "$AppId"

[Setup]
AppId={{$MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir=$AppDir\build\windows\installer
OutputBaseFilename=AltairGuidance-{#MyAppVersion}-Setup
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ArchitecturesInstallIn64BitMode=x64
PrivilegesRequired=lowest
UninstallDisplayIcon={app}\{#MyAppExeName}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "$BuildDir\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
"@

$InnoScriptPath = "$PackagingDir\altair-guidance.iss"
$InnoScript | Out-File -FilePath $InnoScriptPath -Encoding UTF8

# Step 3: Build the installer
Write-Host ""
Write-Host "[3/3] Building installer with Inno Setup..." -ForegroundColor Yellow

# Check if Inno Setup is installed
$InnoSetupPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
if (-not (Test-Path $InnoSetupPath)) {
    Write-Warning "Inno Setup not found at: $InnoSetupPath"
    Write-Host ""
    Write-Host "Please install Inno Setup from: https://jrsoftware.org/isdl.php" -ForegroundColor Yellow
    Write-Host "Then run this script again." -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Alternatively, you can manually compile the Inno Setup script at:" -ForegroundColor Yellow
    Write-Host "  $InnoScriptPath" -ForegroundColor Cyan
    exit 1
}

# Compile the installer
& $InnoSetupPath $InnoScriptPath

$OutputInstaller = "$AppDir\build\windows\installer\AltairGuidance-$Version-Setup.exe"

Write-Host ""
Write-Host "======================================" -ForegroundColor Green
Write-Host "âœ… Installer built successfully!" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green
Write-Host ""
Write-Host "Output: $OutputInstaller" -ForegroundColor Cyan
if (Test-Path $OutputInstaller) {
    $Size = (Get-Item $OutputInstaller).Length / 1MB
    Write-Host ("Size: {0:N2} MB" -f $Size) -ForegroundColor Cyan
}
Write-Host ""
Write-Host "To install:" -ForegroundColor Yellow
Write-Host "  1. Double-click the installer" -ForegroundColor Yellow
Write-Host "  2. Follow the installation wizard" -ForegroundColor Yellow
Write-Host ""
