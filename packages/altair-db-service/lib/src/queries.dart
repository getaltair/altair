import 'package:surrealdb/surrealdb.dart';

/// Common link types for cross-app integration
class LinkType {
  /// Note references task (e.g., meeting notes mention task)
  static const String references = 'references';

  /// Task blocks another task (dependency)
  static const String blocks = 'blocks';

  /// Task is blocked by another task
  static const String blockedBy = 'blocked_by';

  /// Generic relationship
  static const String relatesTo = 'relates_to';

  /// Task requires item (e.g., "Install software" requires laptop)
  static const String requires = 'requires';

  /// Note is about project/task (stronger than reference)
  static const String about = 'about';

  /// Auto-generated by AI
  static const String suggested = 'suggested';

  /// Task mentioned in note (backlink)
  static const String mentionedIn = 'mentioned_in';
}

/// Query utilities for cross-app data integration
class AltairQueries {
  final SurrealDB db;

  AltairQueries(this.db);

  /// Get all resources linked TO a given resource (backlinks)
  Future<List<Map<String, dynamic>>> getBacklinks(String resourceId) async {
    final result = await db.query(
      '''
      SELECT
        source,
        link_type,
        created_at,
        (SELECT * FROM \$source)[0] AS resource
      FROM link
      WHERE target = \$resourceId
      ORDER BY created_at DESC;
    ''',
      {'resourceId': resourceId},
    );

    if (result == null) return [];
    final list = (result as List).isNotEmpty ? (result[0] as List) : [];
    return List<Map<String, dynamic>>.from(list);
  }

  /// Get all resources linked FROM a given resource (forward links)
  Future<List<Map<String, dynamic>>> getForwardLinks(String resourceId) async {
    final result = await db.query(
      '''
      SELECT
        target,
        link_type,
        created_at,
        (SELECT * FROM \$target)[0] AS resource
      FROM link
      WHERE source = \$resourceId
      ORDER BY created_at DESC;
    ''',
      {'resourceId': resourceId},
    );

    if (result == null) return [];
    final list = (result as List).isNotEmpty ? (result[0] as List) : [];
    return List<Map<String, dynamic>>.from(list);
  }

  /// Get ALL links (both directions) for a resource
  Future<List<Map<String, dynamic>>> getAllLinks(String resourceId) async {
    final result = await db.query(
      '''
      -- Get links where resource is source
      SELECT
        'outgoing' AS direction,
        target AS linked_resource_id,
        link_type,
        created_at,
        (SELECT * FROM \$target)[0] AS resource
      FROM link
      WHERE source = \$resourceId

      UNION

      -- Get links where resource is target
      SELECT
        'incoming' AS direction,
        source AS linked_resource_id,
        link_type,
        created_at,
        (SELECT * FROM \$source)[0] AS resource
      FROM link
      WHERE target = \$resourceId

      ORDER BY created_at DESC;
    ''',
      {'resourceId': resourceId},
    );

    if (result == null) return [];
    final list = (result as List).isNotEmpty ? (result[0] as List) : [];
    return List<Map<String, dynamic>>.from(list);
  }

  /// Search across all apps
  Future<List<Map<String, dynamic>>> searchAll(String query) async {
    final result = await db.query(
      '''
      SELECT
        id,
        title,
        description,
        'task' AS resource_type,
        created_at
      FROM task
      WHERE title @@ \$query OR description @@ \$query

      UNION

      SELECT
        id,
        title,
        content AS description,
        'note' AS resource_type,
        created_at
      FROM note
      WHERE title @@ \$query OR content @@ \$query

      UNION

      SELECT
        id,
        name AS title,
        description,
        'item' AS resource_type,
        created_at
      FROM item
      WHERE name @@ \$query OR description @@ \$query

      ORDER BY created_at DESC
      LIMIT 50;
    ''',
      {'query': query},
    );

    if (result == null) return [];
    final list = (result as List).isNotEmpty ? (result[0] as List) : [];
    return List<Map<String, dynamic>>.from(list);
  }

  /// Get tasks blocking a given task
  Future<List<Map<String, dynamic>>> getBlockingTasks(String taskId) async {
    final result = await db.query(
      '''
      SELECT
        (SELECT * FROM \$source)[0] AS blocking_task
      FROM link
      WHERE target = \$taskId AND link_type = 'blocks';
    ''',
      {'taskId': taskId},
    );

    if (result == null) return [];
    final list = (result as List).isNotEmpty ? (result[0] as List) : [];
    return List<Map<String, dynamic>>.from(list);
  }

  /// Get all tasks in a project, including linked notes and items
  Future<Map<String, dynamic>> getProjectWithLinks(String projectId) async {
    final result = await db.query(
      '''
      LET \$project = (SELECT * FROM \$projectId)[0];
      LET \$tasks = SELECT * FROM task WHERE project_id = \$projectId;

      LET \$linked_notes = SELECT DISTINCT
        (SELECT * FROM \$target)[0] AS note
      FROM link
      WHERE source IN (SELECT VALUE id FROM \$tasks)
        AND link_type = 'references'
        AND string::startsWith(\$target, 'note:');

      LET \$linked_items = SELECT DISTINCT
        (SELECT * FROM \$target)[0] AS item
      FROM link
      WHERE source IN (SELECT VALUE id FROM \$tasks)
        AND link_type = 'requires'
        AND string::startsWith(\$target, 'item:');

      RETURN {
        project: \$project,
        tasks: \$tasks,
        linked_notes: \$linked_notes,
        linked_items: \$linked_items
      };
    ''',
      {'projectId': projectId},
    );

    if (result == null ||
        (result as List).isEmpty ||
        result[0] == null ||
        (result[0] as List).isEmpty) {
      return {};
    }
    return result[0][0] as Map<String, dynamic>;
  }

  /// Get graph data for visualization
  Future<Map<String, dynamic>> getGraphData({
    String? resourceId,
    int depth = 2,
  }) async {
    final result = await db.query('''
      -- Get the starting resource(s)
      LET \$start = SELECT * FROM ${resourceId != null ? '\$resourceId' : 'task, note, item'};

      -- Get all links up to depth
      LET \$links = SELECT * FROM link WHERE
        source IN (SELECT VALUE id FROM \$start) OR
        target IN (SELECT VALUE id FROM \$start);

      -- Get all connected resources
      LET \$nodes = (
        SELECT VALUE id FROM \$start
        UNION
        SELECT VALUE source FROM \$links
        UNION
        SELECT VALUE target FROM \$links
      );

      LET \$node_details = SELECT
        id,
        title,
        type::table(id) AS type
      FROM \$nodes;

      RETURN {
        nodes: \$node_details,
        links: \$links
      };
    ''', resourceId != null ? {'resourceId': resourceId} : {});

    if (result == null ||
        (result as List).isEmpty ||
        result[0] == null ||
        (result[0] as List).isEmpty) {
      return {};
    }
    return result[0][0] as Map<String, dynamic>;
  }
}
